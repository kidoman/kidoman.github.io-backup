<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: engineering | Karan Misra]]></title>
  <link href="http://kidoman.io/categories/engineering/atom.xml" rel="self"/>
  <link href="http://kidoman.io/"/>
  <updated>2014-05-13T16:40:04+05:30</updated>
  <id>http://kidoman.io/</id>
  <author>
    <name><![CDATA[Karan Misra]]></name>
    <email><![CDATA[karan.misra@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TheBot - Adventures in Hardware]]></title>
    <link href="http://kidoman.io/engineering/thebot.html"/>
    <updated>2014-03-02T08:00:00+05:30</updated>
    <id>http://kidoman.io/engineering/thebot</id>
    <content type="html"><![CDATA[<p>(cross posted from the <a href="http://thoughtworks.github.io/p2/issue09/thebot">P2 Magazine</a>)</p>

<p>“Robots that are controlled by node.js.” The idea imprinted on me immediately.</p>

<p>“A crowd controlled robotic car!"</p>

<p><img class="center" src="/images/thebot-1.png" title="TheBot Mascot" ></p>

<p>A fun product with a tonne of learning potential. However, doing a &ldquo;follow the blog posts/tutorials&rdquo; stitch and patch job recommended on the NodeBots site did not excite me one bit. Sure, we’d done it in two days, but what would we have learned in the process?</p>

<p>Despite having worked extensively on node.js, the language did not interest me much &ndash; ambiguous syntax, callbacks, promises, etc. I had been looking for an opportunity do something real in Golang, and building a concurrent open source firmware for TheBot was just the ticket.</p>

<p><img class="center" src="/images/thebot-2.jpg" title="TheBot" ></p>

<p>TheBot is first and foremost an experiment. An experiment aimed at research and learning. An experiment to kickstart a hardware engineering culture in ThoughtWorks. Birthed as a crowd controlled robotic car that transmits video feed back to the controller; the vision has transformed many times during the development. Can it be the ultimate open source sensing/proximity prototyping platform? Could we extract a product out of this?</p>

<blockquote><p>“TheBot’s value is the immense learning and research potential.”</p></blockquote>

<p>On first appearance, TheBot looks like the result of odd inter-breeding between a remote-controlled car and the contents of your local Radio Shack. TheBot itself though, is not really just a car, it is actually a fully-fledged Golang based framework for working with hardware sensors and motor control. In it’s current incarnation, the RaspberryPi-based robot allows you to control it remotely using any device capable of running a modern browser. The on-board smarts do things like use rangefinders to implement collision avoidance, and you can even send it logo-ish commands like ‘turn 90 degrees right’.</p>

<p>Right now, we are laying down the rails for what is to come next. The modules are already taking shape and we are using our learnings from TheBot to drive the development of the framework(s) and the underlying hardware abstraction layer.</p>

<p>Unique Selling Proposal: TheBot’s value is the immense learning and research potential in its current form. The fact that it looks like a car and has 4 wheels is just a bonus.</p>

<h3>The Guts</h3>

<p>We plan on doing a proper video walk through of the hardware soon, but until then:</p>

<p><img class="center" src="/images/thebot-3.png" title="Block Diagram" ></p>

<h3>Why Golang?</h3>

<p>Golang has excellent and remarkable support for concurrency in the core language. The RaspberryPi is single threaded and we needed the car to handle multiple real world interactions at the same time. Using threads would have forced us to use mutexes, etc, for synchronization. The ‘goroutines+channels' architecture in Golang helped us focus on the &ldquo;actual&rdquo; interactions. (Goroutines are light weight threads which are executed via the Go runtime on real threads via a M:N mapping. Channels are a typed mechanism for passing messages between goroutines). The resulting code is much easier to read, reason with and understand.</p>

<blockquote><p>“Simply running the binary was always enough. This helped tremendously in shortening our development/build/deploy cycles and made the process even more gratifying.”</p></blockquote>

<p>Golang is a statically typed, garbage collected and compiled programming language. However, in use, it feels like a FAST (slightly) verbose scripting language which has support for systems programming  and duck typing. Since the cross compiled binary was entirely self contained, no runtime was needed. Simply running the binary was enough, which helped tremendously in shortening our development, build and deploy cycles and made the process even more gratifying.</p>

<h3>Why RaspberryPi?</h3>

<p>The RaspberryPi represents the most available lowest common denominator; an ARM chip running Linux. Besides marrying well with cross compiled Golang, it also doesn’t skimp in the I/O department. It supports I2C, GPIO, and PWM. The forgiving nature of the hardware, integrated HDMI/Ethernet/USB go a long way in making it a good first choice.</p>

<p>That being said, we could deploy the firmware, in its current form, on any Linux based platform that has the ability to talk GPIO/I2C, including:
BeagleBone Black
PandaBoard, etc.</p>

<p>Our long term goal is to be able to target raw microcontrollers.</p>

<h3>What does it do ?</h3>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/iMXjkZ4B3EM "></iframe></div></p>

<h3>What next?</h3>

<p>The current form factor was an evolutionary step; a convenience which allowed us to get started quickly.</p>

<p>We definitely want to cater to the hobbyist / education space &ndash; possibly in the form of a stripped down, dressed up Super 8 sensor kit, to help people get started quickly &ndash; as it has the potential for maximum impact at the grassroots level. At the same time, we want to balance things out by looking at solidly marketable areas like B2B logistics / delivery &ndash; which could apply to the rural health care space &ndash; and home automation. The home automation space is particularly exciting as the potential for integration between smart software and hardware innovation is really high &ndash; aptly demonstrated by the NEST devices.</p>

<p>To make the above happen, we will need to stretch TheBot’s legs and expand its capabilities. We are in the process of extracting a hardware abstraction framework (EMBD) which will allow us to target a variety of hosts &ndash; RPi, BBB, etc. &ndash; from a single code base. This is particularly helpful because it will allow us to quickly prototype solutions using readily available hobby boards, while still retaining the ability to target the final hardware. Besides that, we are also interested in route mapping and visualization, as capability in this area will open many more opportunities.</p>

<p style="text-align:center;"> ⁂</p>

<p>The development process was nothing short of enthralling. We did not have well established libraries to lean back on. We went into this &ldquo;batteries not included.&rdquo; The decisions were deliberate; to use Golang and not pre-existing libraries because the potential for learning would have been limited. We optimized for maximized learning. And boy did it pay off. Not only did we end up writing our very own Golang libraries for interfacing with all these sensors, we also had the opportunity to try and model the interactions of software with the real world. Imagine for one second how many different ways there are to make the car turn right. Things we take for granted in software can open a can of worms when the &ldquo;real world&rdquo; gets involved!</p>

<p>The technical attractiveness of such an undertaking is obvious, but there is more to it. I believe that a lot of good can be done for the &ldquo;voiceless&rdquo; by getting cheap commodity devices into their hands. A simple 2G connected solar powered open hardware device could allow a village like Panchayat, India, to bypass all the middle men and leverage social networking to report grievances to their congress representative. This could bring about a revolution. What minister worth his salt would want to look bad on Facebook? Our hope is that the resulting learnings and framework created from TheBot effort can and will make this possible.</p>

<p>The possibilities are truly endless.</p>

<h3>Links to Watch</h3>

<p><a href="https://github.com/kidoman/embd" target="_blank">github.com/kidoman/embd</a></p>

<h3>Credits</h3>

<p>Contributors in no particular order: Sapto, Rohit, Kunal, Nikesh, Shantanu, Hanu, Gagan, Shaunak, Kashyap, Mukund, Akhil, Vishwas, Mallik, Deepthi, Shaun, Nag, Bala &amp; Sam Newman</p>

<p><img class="center" src="/images/thebot-4.jpg" title="The Team" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go + Hadoop!]]></title>
    <link href="http://kidoman.io/engineering/go-hadoop.html"/>
    <updated>2013-09-29T14:37:00+05:30</updated>
    <id>http://kidoman.io/engineering/go-hadoop</id>
    <content type="html"><![CDATA[<p>This is very interesting development indeed: <a href="http://hortonworks.com/blog/go-hadoop-err-hadoop-and-go/">http://hortonworks.com/blog/go-hadoop-err-hadoop-and-go/</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing RoadRunners!]]></title>
    <link href="http://kidoman.io/engineering/announcing-roadrunners.html"/>
    <updated>2013-08-31T10:28:00+05:30</updated>
    <id>http://kidoman.io/engineering/announcing-roadrunners</id>
    <content type="html"><![CDATA[<p>I will just leave it up here: <a href="http://roadrunners.in/">RoadRunners</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang: testing the waters]]></title>
    <link href="http://kidoman.io/engineering/golang-testing-the-waters.html"/>
    <updated>2013-07-26T02:44:00+05:30</updated>
    <id>http://kidoman.io/engineering/golang-testing-the-waters</id>
    <content type="html"><![CDATA[<p><img src="//1-ps.googleusercontent.com/x/s.golang-org.appspot.com/golang.org/doc/gopher/xfrontpage.png.pagespeed.ic._-JkwHsaKq.webp" alt="Gopher" /></p>

<p><a href="http://golang.org/">Go</a> has caught my fancy. There, I said it.</p>

<p>The Rubyist in me loves the static duck typing. Loves the promise of never having to navigate &lsquo;murdered by design-patterns&rsquo; code (AbstractFactoryFactory anyone?) Loves the near C/C++ speeds (ok, I know Ruby is not the fastest language, but I can always wish, right?) Loves the ability to compile large code bases in seconds. Loves the channels and the freedom they provide in implementing good/crisp CSP.</p>

<p>Sure, there are a few rough edges but nothing sharp enough to stop me from proposing to build the next enterprise application in Go. I mean, if Google betting YouTube and their primary <a href="http://www.oscon.com/oscon2013/public/schedule/detail/28669">download</a> <a href="http://talks.golang.org/2013/oscon-dl.slide#1">service</a> on it isn&rsquo;t precedence enough, I don&rsquo;t know what can be.</p>

<p>I do not want ThoughtWorks to be late to the party (<a href="http://nodejs.org/">again</a>.) The time is ripe; the community is still taking shape and extremely malleable (in a good way.) So if a little/lot/hardcore evangelizing is what it takes, I am up for the challenge.</p>

<h1>Link to the talk</h1>

<p><a href="http://goo.gl/geuWOP">click</a></p>

<h1>The Talk</h1>

<p>The talk was never intended to be a hands on session (although it transfigured into one towards the end.) More &ldquo;daze and amaze.&rdquo; I think I succeeded on the first part at least.</p>

<h2>The Amaze</h2>

<p>I wanted to highlight the best bits of Golang from the start. No stringing along for 40 slides whilst pretending to know a lot more than I did.</p>

<ul>
<li>Static duck typing</li>
<li>No explicit inheritance + focus on composing</li>
<li>Pointers for efficient access</li>
<li>Built in language support for channels</li>
<li>Super fast compilation</li>
<li>Garbage collection</li>
<li>Gofmt (no more arguments about indentation)</li>
</ul>


<h2>The Daze</h2>

<p>Go will probably make inroads faster into some areas vs others. Main areas of focus are:</p>

<ul>
<li>Creating a highly efficient backend service based on RPC / JSON RPC</li>
<li>Best possible platform for implementing an API end point</li>
<li>Load balancer / database type applications</li>
<li>(world is Go&rsquo;s oyster)</li>
</ul>


<h2>Testing Story</h2>

<p>The core members of Go are ensuring that people do not associate Go with not having to test their code. In fact, the best place to learn testing in Go is to browse through the implementation of Go packages (written by the creators of Go themselves.)</p>

<ul>
<li><a href="http://golang.org/pkg/testing/">&ldquo;testing&rdquo;</a> package makes testing really simple; some may say the approach taken is naive</li>
<li><a href="https://github.com/orfjackal/gospec">GoSpec</a> aims to solve that. Provides a BDD type testing interface for Golang</li>
<li>Speed of running tests makes the whole process a joy</li>
</ul>


<h2>Deployment</h2>

<p>Deployment couldn&rsquo;t be easier. Go spits out a statically linked executable, making dependency management a thing of the past. Package up your executable into a RPM/DEB/what-not and throw it up. Couldn&rsquo;t be simpler.</p>

<h2>Conclusion</h2>

<p>There are still nascent areas of Go which will require attention from the community to gain traction and get smoothened out. However this shouldn&rsquo;t stop us from deploying Go as a API backend for a RoR powered AngularJS based single page application. Use the best bits of the various platforms to get going in the fastest manner possible. Throw the rot out as better Go based alternatives become available. :)</p>

<h2>Resources</h2>

<p>Listing the various resources and good to read links (in no particular order):</p>

<ul>
<li><a href="http://www.usingcsp.com/">CSP</a> (<a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">wiki</a>), a must read for understand CSP</li>
<li><a href="http://golang.org/">Official homepage</a></li>
<li><a href="http://play.golang.org/">A web based Go runner</a></li>
<li><a href="http://blog.golang.org/">Official blog roll</a></li>
<li><a href="http://blog.mongodb.org/post/60359054233/going-with-go">MongoDB Going with Go</a></li>
<li><a href="http://www.youtube.com/channel/UCtXKDgv1AVoG88PLl8nGXmw">Google Tech Talks YouTube channel</a></li>
<li><a href="https://github.com/diptanu/seli">Seli</a> (written by Diptanu)</li>
<li><a href="https://github.com/orfjackal/gospec">GoSpec</a>, BDD in Go</li>
<li><a href="https://github.com/golang/groupcache">GroupCache</a>, a distributed hybrid client/server memcache alternative</li>
<li><a href="https://github.com/languages/go">Awesome language metrics by Github for Go</a></li>
<li><a href="https://github.com/bradfitz">Brad Fitzpatrik&rsquo;s Github Profile</a></li>
<li><a href="https://github.com/golang">Golang Github Profile</a></li>
<li><a href="http://www.docker.io/">Docker</a> an awesome LXC management tool (<a href="https://github.com/dotcloud/docker">github</a>)</li>
<li><a href="https://github.com/mozilla-services/heka">Heka</a></li>
<li><a href="https://flynn.io/">Flynn</a>, a Docker based OSS Heroku clone</li>
<li><a href="http://robfig.github.io/revel/">Revel</a>, emerging defacto Go web framework</li>
<li><a href="http://www.techempower.com/benchmarks">Techempower Benchmarks</a>, comparing Go&rsquo;s performance to various other web frameworks</li>
<li><a href="http://talks.golang.org/2013/oscon-dl.slide#1">dl.google.com in Go</a>, slides from Brad Fitzpatrik&rsquo;s talk at oscon about reimplementing dl.google.com in Go</li>
<li><a href="http://dave.cheney.net/2013/08/06/go-1-1-on-the-cubieboard-2">Go running on a Cubieboard2</a></li>
<li>Must watch videos on YouTube

<ul>
<li><a href="http://www.youtube.com/watch?v=f6kdp27TYZs">Go Concurrency Patterns</a></li>
<li><a href="http://www.youtube.com/watch?v=MzYZhh6gpI0">Tour of Go</a></li>
<li><a href="http://www.youtube.com/watch?v=kKQLhGZVN4A">Go in Production</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js in action: Learnings]]></title>
    <link href="http://kidoman.io/engineering/node-dot-js-in-action-learnings.html"/>
    <updated>2013-05-31T01:58:00+05:30</updated>
    <id>http://kidoman.io/engineering/node-dot-js-in-action-learnings</id>
    <content type="html"><![CDATA[<p><img src="/images/node.js.png" title="nodejs" ></p>

<p>I recently gave a talk on node.js at work&hellip; the talk was surprisingly well attended. It was scheduled to start at 1 PM. At around 1:02 PM, I was alone in the room with not another soul in sight. The room filled to the brim in the next 10 minutes. Last count = 33</p>

<h1>Link to the talk</h1>

<p><a href="http://goo.gl/Pcz2wQ">click</a></p>

<h1>The Talk</h1>

<p>The theme of the talk was to get people excited about the node.js work we were doing for a large enterprise client. Almost 9 months into development, we had figured out a tonne of patterns and idioms and had actually started becoming productive with it. Talking about the hurdles faced during the non avoidable learning curve seemed like a sensible thing to do.</p>

<h2>Tech Stack</h2>

<p>Although I cannot reveal any actual URLs atm, the stack of the application we are developing is as follows:</p>

<ul>
<li>node.js (Platform)</li>
<li>Express (Web Server)</li>
<li>Sequelize (ORM)</li>
<li>MySQL (Database)</li>
<li>Q (Promises)</li>
<li>Mocha/Sinon/Chai (and their -as-promised bretheren, for TDD)</li>
<li>Grunt (Command runner)</li>
<li>Coffee-Resque (For background jobs)</li>
<li>Socket.io (For realtime tracking of connected clients)</li>
<li>Redis (As a datastore for our generated socket.io handshake tokens)</li>
<li>connect-assetmanager (For managing our assets; <strong>update</strong> we have now replaced this with our own hand rolled solution)</li>
</ul>


<h2>Promises to Keep: Q</h2>

<p>I think it is essential for any new node.js project to base itself on a solid promises library. As indicated above, the library of choice for us was Q. I would go out on a limb and say this &ndash; &ldquo;Avoiding callback hell is probably the least interesting feature of Q.&rdquo;</p>

<p>Q allows us to beautifully structure our code without excessive &ldquo;pyramiding.&rdquo; You still end up with a few nested promises from time to time, but that is also avoidable with judicious usage of Q.spread.</p>

<h2>Testing</h2>

<p>Equally important is the need to get the TDD/BDD pattern flowing right from get go. Mocha/Sinon/Chai allow BDD in JavaScript to look almost as elegant as RSpec (which I consider to be the holy grail of developer friendly BDD.) Being smart and using the -as-promised utility node modules will also save you a lot of grief and restore a sense of sanity to the test cases (you can then essentially start returning promises of future asserts from your test cases, instead of having to call a <strong>done()</strong> at the end to signal the end.)</p>

<h2>Scaling and Deployment</h2>

<p>Our dreams of serving a million requests from a single node.js process were quickly shattered when we discovered a pegged 100% CPU (on a single core.) Besides trying to fix the main issue (which turned out to be the MySQL driver being used by sequelize) we also spent some time getting the <a href="http://unicorn.bogomips.org/">unicornification</a> of node.js right. We ended up with a master-slave arrangement which allowed us to scale our application to N-1 cores (where N is the total number of cores available in the machine.) Common sense dictated the <strong>-1</strong> part (to leave a core aside for the kernel and various sub systems.)</p>

<p>Figuring our deployments was also fun. Although there was some talk of building and deploying a .rpm (our target Linux distribution was CentOS 6.4), the general lack of time lead us to adapt a git based deployment mechanism. Any SHA is a good candidate for deployment to any of our environments. We obviously ended up tagging the good ones.</p>

<h2>Conclusion</h2>

<p>We really went out on a limb here by using node.js for the project when we did not actually have much in house expertise on the same. However, the effort has redeemed itself many fold. A lot of people have successfully managed to <strong>get</strong> &ldquo;concurrent programming&rdquo; as a result. Coming out from the comfort zone of RoR, .NET and Java also possibly has changed the course of their lives for ever! :)</p>
]]></content>
  </entry>
  
</feed>
